#!/usr/bin/env python3

import io
import os.path
import select
import sys
import boto3
import botocore
import argparse
import re
import tempfile
import s3
import certs

def ca(args):
  ca_parser.print_help()

def ca_sign(args):
  bucket = args.BUCKET
  cluster = args.CLUSTER
  req_parameter = args.REQ
  ca_cert = args.ca_cert
  ca_key = args.ca_key

  if req_parameter == 'stdin':
    if select.select([sys.stdin,],[],[],0.0)[0]:
      req_file = sys.stdin
    else:
      raise ValueError('There is not data on stdin')
  elif os.path.isfile(req_parameter):
    req_file = open(req_parameter, 'r')
  else:
    req_file = io.BytesIO(bytes(req_parameter, 'utf8'))
    req_file.seek(0)
  
  if ca_cert is not None:
    cert_file = open(ca_cert, 'r')
  else:
    cert_file = s3.download_cert_file(bucket, cluster)

  if ca_key is not None:
    key_file = open(ca_key, 'r')
  else:
    key_file = s3.download_key_file(bucket, cluster)

  cert = certs.sign_req(cert_file, key_file, req_file, cluster)

  print(cert.read().decode('utf8'))

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description="AWS Kubernetes user management certificate")
  subparsers = parser.add_subparsers()
  
  ca_parser = subparsers.add_parser('ca', help='Certificate authority related commands')
  ca_parser.set_defaults(func=ca)
  ca_subparsers = ca_parser.add_subparsers()
  ca_sign_parser = ca_subparsers.add_parser('sign', help='Certificate authority signing related commands')
  ca_sign_parser.set_defaults(func=ca_sign)
  ca_sign_parser.add_argument('BUCKET', help='The S3 bucket containing cluster information')
  ca_sign_parser.add_argument('CLUSTER', help='Cluster name for which you want to sign the certificate against')
  ca_sign_parser.add_argument('REQ', help='Certificate request file. Pass -- for stdin')
  ca_sign_parser.add_argument('--ca-cert', help='Path to a certificate authority public certificate')
  ca_sign_parser.add_argument('--ca-key', help='Path to a certificate authority private key')

  args = parser.parse_args()
  if hasattr(args, 'func'):
    try:
      args.func(args)
    except (certs.CertsException, s3.S3Exception) as e:
      sys.stderr.write(e.args[0])
      sys.exit(1)
  else:
    parser.print_help()

  sys.exit(0)
