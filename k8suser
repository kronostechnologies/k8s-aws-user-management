#!/usr/bin/env python3

import io
import os.path
import select
import sys
import boto3
import botocore
import argparse
import re
import tempfile
import s3
import certs

def subject(args):
  cert_parameter = args.CERT
  part = args.part

  cert_file = __read_file_from_command_line(cert_parameter)
  cert_subject = certs.get_cert_subject(cert_file)

  if part is not None:
    if hasattr(cert_subject, part):
      output =  getattr(cert_subject, part)
    else:
      raise ValueError("Part '{0}' is invalid or is not found in certificate subject".format(part))
  else:
    output = cert_subject

  print(output)

def sign(args):
  bucket = args.BUCKET
  cluster = args.CLUSTER
  req_parameter = args.REQ
  group = args.group
  ca_cert = args.ca_cert
  ca_key = args.ca_key

  req_file = __read_file_from_command_line(req_parameter)
  
  if ca_cert is not None:
    cert_file = open(ca_cert, 'r')
  else:
    cert_file = s3.download_cert_file(bucket, cluster)

  if ca_key is not None:
    key_file = open(ca_key, 'r')
  else:
    key_file = s3.download_key_file(bucket, cluster)

  cert = certs.sign_req(cert_file, key_file, req_file, cluster, group)

  print(cert.read().decode('utf8'))

def __read_file_from_command_line(param):
  if param == 'stdin':
    if select.select([sys.stdin,],[],[],0.0)[0]:
      cert_file = sys.stdin
    else:
      raise ValueError('There is not data on stdin')
  elif os.path.isfile(param):
    cert_file = open(param, 'r')
  else:  
    cert_file = io.BytesIO(bytes(param, 'utf8'))
    cert_file.seek(0)

  return cert_file

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description="AWS Kubernetes user management certificate")
  subparsers = parser.add_subparsers()
  
  sign_parser = subparsers.add_parser('sign', help='Sign a certificate request with the certificate authority found the in given S3 bucket for the given cluster')
  sign_parser.set_defaults(func=sign)
  sign_parser.add_argument('BUCKET', help='The S3 bucket containing cluster information')
  sign_parser.add_argument('CLUSTER', help='Cluster name for which you want to sign the certificate against')
  sign_parser.add_argument('REQ', help='Certificate request file. Pass -- for stdin')
  sign_parser.add_argument('--ca-cert', help='Path to a certificate authority certificate')
  sign_parser.add_argument('--ca-key', help='Path to a certificate authority private key')
  sign_parser.add_argument('--group', help='Add an organisation (O) subject to the resulting certificate ')

  subject_parser = subparsers.add_parser('subject', help='Sign a certificate request with the certificate authority found the in given S3 bucket for the given cluster')
  subject_parser.set_defaults(func=subject)
  subject_parser.add_argument('CERT', help='The certificate for which we want subject information')
  subject_parser.add_argument('--part', help='Parts of the subject you want information')
  

  args = parser.parse_args()
  if hasattr(args, 'func'):
    try:
      args.func(args)
    except (certs.CertsException, s3.S3Exception) as e:
      sys.stderr.write(e.args[0])
      sys.exit(1)
  else:
    parser.print_help()

  sys.exit(0)
